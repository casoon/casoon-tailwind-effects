/* =========================================
   COMPLEX UI PATTERNS - CS-PATTERNS LAYER
   ========================================= */

/*
 * Complex composed patterns that combine multiple CSS features:
 * - Modal systems with backdrop + dialog
 * - Interactive disclosure patterns  
 * - Complex glass card compositions
 * - Multi-state form patterns
 * - Layout patterns (hero, auth forms, etc.)
 * 
 * These patterns are more complex than simple components but less
 * specific than utilities. They represent composed UI patterns.
 */

@layer cs-patterns {
  
  /* ===== MODAL SYSTEM PATTERN ===== */
  /* Full modal pattern with backdrop + dialog */
  .cs-modal-system {
    /* Backdrop layer */
    position: fixed;
    inset: 0;
    background: color-mix(in srgb, #000 55%, transparent);
    backdrop-filter: blur(2px);
    z-index: var(--cs-z-modal);
    display: grid;
    place-items: center;
    
    /* Child modal dialog */
    > .cs-modal-dialog {
      margin: auto;
      max-inline-size: min(680px, 92cqi);
      background: var(--cs-elev1);
      color: var(--cs-text);
      border: 1px solid var(--cs-border);
      border-radius: var(--cs-radius);
      box-shadow: var(--cs-shadow-2);
      padding: var(--cs-space-6);
      
      /* Modal header pattern */
      > header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        gap: var(--cs-space-2);
      }
      
      /* Close button in modal */
      [data-close].cs-focus-ring {
        inline-size: 40px;
        block-size: 40px;
        border-radius: 999px;
      }
    }
  }

  /* Target-based modal pattern (progressive enhancement) */
  .cs-modal-target-pattern {
    display: none;
    
    &:target {
      display: grid;
      place-items: center;
      position: fixed;
      inset: 0;
      background: color-mix(in srgb, #000 55%, transparent);
      backdrop-filter: blur(2px);
      z-index: var(--cs-z-modal);
    }
  }

  /* ===== INTERACTIVE DISCLOSURE PATTERN ===== */
  /* Complex disclosure with progressive enhancement */
  @supports selector(:has(+ *)) {
    .cs-disclosure-pattern {
      border: 1px solid var(--cs-border);
      border-radius: var(--cs-radius);
      background: var(--cs-elev1);
      
      /* Summary/trigger */
      > summary {
        list-style: none;
        padding: var(--cs-space-3) var(--cs-space-4);
        cursor: pointer;
        position: relative;
        
        /* Custom disclosure indicator */
        &::after {
          content: '▼';
          position: absolute;
          right: var(--cs-space-4);
          transition: transform var(--cs-transition);
        }
        
        /* Hide native marker */
        &::-webkit-details-marker {
          display: none;
        }
      }
      
      /* Content area */
      > .cs-disclosure-content {
        padding: 0 var(--cs-space-4) var(--cs-space-4);
        border-top: 1px solid var(--cs-border);
      }
      
      /* Open state */
      &[open] {
        box-shadow: var(--cs-shadow-1);
        
        > summary::after {
          transform: rotate(180deg);
        }
      }
    }
  }

  /* ===== GLASS CARD COMPOSITION PATTERN ===== */
  /* Complex glass card with multiple interaction states */
  .cs-glass-card-complex {
    /* Base glass card */
    background: var(--cs-glass-bg-light, var(--cs-surface));
    border: 1px solid var(--cs-glass-border-medium, var(--cs-border));
    border-radius: 20px;
    padding: 2rem;
    box-shadow: var(--cs-glass-shadow-def, var(--cs-shadow-2));
    backdrop-filter: blur(16px);
    position: relative;
    overflow: hidden;
    
    /* Interaction states */
    transition: all var(--cs-transition) ease;
    
    &:hover {
      background: var(--cs-glass-bg-hover, var(--cs-elev1));
      border-color: var(--cs-glass-border-strong, var(--cs-border));
      box-shadow: 0 20px 40px var(--cs-glass-shadow-strong, rgba(0,0,0,0.15));
      transform: translateY(-2px);
    }
    
    &:focus-within {
      outline: 2px solid var(--cs-glass-focus-ring, var(--cs-brand));
      outline-offset: 2px;
    }
    
    /* Inner content patterns */
    > .cs-card-header {
      display: flex;
      align-items: center;
      gap: var(--cs-space-3);
      margin-bottom: var(--cs-space-4);
    }
    
    > .cs-card-content {
      display: grid;
      gap: var(--cs-space-3);
    }
    
    > .cs-card-actions {
      display: flex;
      gap: var(--cs-space-2);
      justify-content: flex-end;
      margin-top: var(--cs-space-4);
      padding-top: var(--cs-space-4);
      border-top: 1px solid var(--cs-border);
    }
  }

  /* ===== FORM FIELD PATTERN WITH STATES ===== */
  /* Complex form field with error states and progressive enhancement */
  @supports selector(:has(+ *)) {
    .cs-field-pattern {
      display: grid;
      gap: var(--cs-space-2);
      
      /* Field wrapper */
      > .cs-field-wrapper {
        position: relative;
        
        /* Input/field */
        > .cs-field {
          width: 100%;
          padding: var(--cs-space-3);
          border: 1px solid var(--cs-border);
          border-radius: var(--cs-radius);
          background: var(--cs-surface);
          color: var(--cs-text);
          transition: border-color var(--cs-transition);
          
          &:focus {
            outline: 2px solid var(--cs-brand);
            outline-offset: -2px;
            border-color: var(--cs-brand);
          }
        }
        
        /* Error state when followed by error message */
        &:has(+ .cs-error) .cs-field {
          border-color: var(--cs-danger);
        }
      }
      
      /* Error message */
      > .cs-error {
        color: var(--cs-danger);
        font-size: var(--cs-fs-sm);
        display: flex;
        align-items: center;
        gap: var(--cs-space-2);
        
        &::before {
          content: '⚠️';
          font-size: 0.875em;
        }
      }
      
      /* Success state */
      &[data-valid] {
        > .cs-field-wrapper > .cs-field {
          border-color: var(--cs-success);
        }
        
        > .cs-success {
          color: var(--cs-success);
          font-size: var(--cs-fs-sm);
          
          &::before {
            content: '✅';
            font-size: 0.875em;
          }
        }
      }
    }
  }

  /* ===== RESPONSIVE LAYOUT PATTERN ===== */
  /* Complex responsive layout with container queries */
  .cs-responsive-layout-pattern {
    container-type: inline-size;
    display: grid;
    gap: var(--cs-space-4);
    
    /* Base mobile-first layout */
    grid-template-columns: 1fr;
    grid-template-areas:
      "header"
      "sidebar"
      "main"
      "footer";
    
    /* Container query breakpoints */
    @container (min-width: 640px) {
      grid-template-columns: 250px 1fr;
      grid-template-areas:
        "header header"
        "sidebar main"
        "footer footer";
    }
    
    @container (min-width: 960px) {
      grid-template-columns: 250px 1fr 200px;
      grid-template-areas:
        "header header header"
        "sidebar main aside"
        "footer footer footer";
    }
    
    /* Child areas */
    > .cs-layout-header { grid-area: header; }
    > .cs-layout-sidebar { grid-area: sidebar; }
    > .cs-layout-main { grid-area: main; }
    > .cs-layout-aside { grid-area: aside; }
    > .cs-layout-footer { grid-area: footer; }
  }
}
